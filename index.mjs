import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import { startHealthCheck } from './controllers/healthCheckController.mjs';
import { balanceRequest } from './controllers/loadBalancerController.mjs';
import { fileURLToPath } from 'url';
import path from 'path';
import fs from 'fs';
import http from 'http';
import https from 'https';
import TelegramBot from 'node-telegram-bot-api';
import {processReferral} from './utils/referralHandler.mjs';


dotenv.config();

const token = process.env.TELEGRAM_BOT_TOKEN;
const JWT_SECRET = process.env.JWT_SECRET;
const bot = new TelegramBot(token, { polling: true });

const app = express();
app.use(express.json());
app.use(cors());

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const buildPath = path.join(__dirname, 'build');
app.use(express.static(buildPath));

const sslOptions = {
    key: fs.readFileSync('/home/kaseev/conf/web/tongaroo.fun/ssl/tongaroo.fun.key'),
    cert: fs.readFileSync('/home/kaseev/conf/web/tongaroo.fun/ssl/tongaroo.fun.crt'),
};

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å —Å–µ—Ä–≤–µ—Ä–æ–≤
startHealthCheck();

app.use('/api', (req, res, next) => {
  console.log(`[API Middleware] Method: ${req.method}, Path: ${req.path}`); // –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø—É—Ç—å
  balanceRequest(req, res, next); 
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, './public/ton.json'));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  if (err instanceof URIError) {
      console.error("URIError detected: ", err.message);
      res.status(400).send("Bad Request");
  } else {
      console.error("Unhandled error:", err.message);
      res.status(500).send("Internal Server Error");
  }
});

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  if (text.startsWith('/start')) {
    const userId = msg.from.id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –≤ —Å—Å—ã–ª–∫–µ
    const refMatch = text.match(/\/start (\d+)/); // –û–∂–∏–¥–∞–µ—Ç—Å—è: "/start <telegramId>"
    const ref = refMatch ? refMatch[1] : null;
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Premium
    // const isPremium = msg.from.is_premium || false;
    const isPremium = true;

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Ç–∏–ª–∏—Ç—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if(ref==userId){
        await bot.sendMessage(
          chatId,
          `üéâ Welcome to our T2E game! ü¶ò Press "/start" to begin earning and compete alongside your friends! üöÄüçÄ`
        );
        return;
      }
      const result = await processReferral({
        user: {
          id: userId,
          first_name: msg.from.first_name,
          last_name: msg.from.last_name || '',
          username: msg.from.username || '',
        },
        ref,
        isPremium,
      });

      if (result.success) {
        await bot.sendMessage(
          chatId,
          `üéâ Welcome to our T2E game! ü¶ò Press "/start" to begin earning and compete alongside your friends! üöÄüçÄ`
        );
      } else {
        await bot.sendMessage(chatId, 'Failed to process your registration. Please try again later.');
      }
    } catch (error) {
      console.error('Error handling /start command:', error);
      await bot.sendMessage(chatId, 'An error has occurred, please try again later.');
    }
  }
});

// const HTTP_PORT = process.env.HTTP_PORT || 80;

// http.createServer(app).listen(HTTP_PORT, () => {
//         console.log(`HTTP Server started on port ${HTTP_PORT}`);
//     });


const HTTPS_PORT = process.env.HTTPS_PORT || 443;
https.createServer(sslOptions, app).listen(HTTPS_PORT, () => {
    console.log(`HTTPS Server started on port ${HTTPS_PORT}`);
});

const HTTP_PORT = process.env.HTTP_PORT || 80;
http.createServer((req, res) => {
    res.writeHead(301, { Location: `https://${req.headers.host}${req.url}` });
    res.end();
}).listen(HTTP_PORT, () => {
    console.log(`HTTP Server started on port ${HTTP_PORT} and redirecting to HTTPS`);
});